{"version":3,"file":"questionnaires-BIJQ3uSX.js","sources":["../../src/utils/questionnaires.ts"],"sourcesContent":["import { QuestionType, QuestionnaireModelType } from \"@/types/questionnaire\";\nimport { toast } from \"@/utils/toast\";\nimport { API } from \"@escolalms/sdk/lib\";\nimport { t } from \"i18next\";\n\ntype getQuestionnaireProps = {\n  questionnaireId: number;\n  courseId: number;\n  fetchQuestionnaire: (\n    modelTypeTitle: string,\n    modelID: number,\n    id: number\n  ) => Promise<API.DefaultResponse<API.QuestionnaireAnswerResponse>>;\n};\n\ntype getQuestionnairesProps = {\n  courseId: number;\n  fetchQuestionnaire: (\n    modelTypeTitle: string,\n    modelID: number,\n    id: number\n  ) => Promise<API.DefaultResponse<API.QuestionnaireAnswerResponse>>;\n  fetchQuestionnaires: (\n    model: string,\n    id: number\n  ) => Promise<API.DefaultMetaResponse<API.Questionnaire>>;\n  onSucces: (questionnairesArray: API.Questionnaire[]) => void;\n  onFinish: () => void;\n};\n\nconst getQuestionnaire = async ({\n  courseId,\n  questionnaireId,\n  fetchQuestionnaire,\n}: getQuestionnaireProps) => {\n  try {\n    const response =\n      courseId &&\n      (await fetchQuestionnaire(\n        QuestionnaireModelType.COURSE,\n        courseId,\n        questionnaireId\n      ));\n    if (response && response.success) {\n      return response.data.questions;\n    }\n  } catch (error) {\n    toast(t<string>(\"UnexpectedError\"), \"error\");\n    console.log(error);\n  }\n};\n\nexport const getQuestionnaires = async ({\n  courseId,\n  fetchQuestionnaires,\n  fetchQuestionnaire,\n  onSucces,\n  onFinish,\n}: getQuestionnairesProps) => {\n  try {\n    const response =\n      courseId &&\n      (await fetchQuestionnaires(QuestionnaireModelType.COURSE, courseId));\n    if (response && response.success) {\n      const questionnairesWithCombinedQuestions = await Promise.all(\n        response.data.map(async (data) => {\n          const res = await getQuestionnaire({\n            courseId,\n            questionnaireId: data.id,\n            fetchQuestionnaire,\n          });\n\n          const combinedQuestions = data.questions.reduce((result, element) => {\n            const matchingElement = res?.find((item) => item.id === element.id);\n\n            const updatedElement = {\n              ...element,\n              rate: matchingElement?.rate,\n              note: matchingElement?.note,\n            };\n\n            updatedElement.rate === null &&\n              updatedElement.note === null &&\n              result.push(updatedElement);\n            return result;\n          }, [] as API.QuestionnaireQuestion[]);\n\n          return {\n            ...data,\n            questions: combinedQuestions.sort(\n              (a, b) => a.position - b.position\n            ),\n          };\n        })\n      );\n\n      onSucces(\n        questionnairesWithCombinedQuestions.filter(\n          (item) => !!item.questions.length\n        )\n      );\n    }\n  } catch (error) {\n    toast(t<string>(\"UnexpectedError\"), \"error\");\n    console.log(error);\n  } finally {\n    onFinish();\n  }\n};\n\nexport const getAverageRate = (reviewQuestions: API.QuestionnaireStars[]) => {\n  const avgRate =\n    reviewQuestions.reduce((sum, item) => sum + item.avg_rate, 0) /\n    reviewQuestions.length;\n  return avgRate.toFixed(1);\n};\n\nexport const getCourseQuestionnaireReviewQuestion = ({\n  questionnaires,\n  questionnaireId,\n  questionType,\n}: {\n  questionnaires: API.Questionnaire[];\n  questionnaireId: number | null;\n  questionType: QuestionType;\n}) => {\n  return questionnaires\n    ?.find((element) => element.id === questionnaireId)\n    ?.questions.filter((item) => item.public_answers)\n    .find((item) => item.type === questionType)?.id;\n};\n"],"names":["getQuestionnaire","courseId","questionnaireId","fetchQuestionnaire","response","QuestionnaireModelType","error","toast","t","getQuestionnaires","fetchQuestionnaires","onSucces","onFinish","questionnairesWithCombinedQuestions","data","res","combinedQuestions","result","element","matchingElement","item","updatedElement","a","b","getCourseQuestionnaireReviewQuestion","questionnaires","questionType","_b","_a"],"mappings":"gGA8BA,MAAMA,EAAmB,MAAO,CAC9B,SAAAC,EACA,gBAAAC,EACA,mBAAAC,CACF,IAA6B,CACvB,GAAA,CACI,MAAAC,EACJH,GACC,MAAME,EACLE,EAAuB,OACvBJ,EACAC,CACF,EACE,GAAAE,GAAYA,EAAS,QACvB,OAAOA,EAAS,KAAK,gBAEhBE,EAAO,CACRC,EAAAC,EAAU,iBAAiB,EAAG,OAAO,EAC3C,QAAQ,IAAIF,CAAK,CAAA,CAErB,EAEaG,EAAoB,MAAO,CACtC,SAAAR,EACA,oBAAAS,EACA,mBAAAP,EACA,SAAAQ,EACA,SAAAC,CACF,IAA8B,CACxB,GAAA,CACF,MAAMR,EACJH,GACC,MAAMS,EAAoBL,EAAuB,OAAQJ,CAAQ,EAChE,GAAAG,GAAYA,EAAS,QAAS,CAC1B,MAAAS,EAAsC,MAAM,QAAQ,IACxDT,EAAS,KAAK,IAAI,MAAOU,GAAS,CAC1B,MAAAC,EAAM,MAAMf,EAAiB,CACjC,SAAAC,EACA,gBAAiBa,EAAK,GACtB,mBAAAX,CAAA,CACD,EAEKa,EAAoBF,EAAK,UAAU,OAAO,CAACG,EAAQC,IAAY,CAC7D,MAAAC,EAAkBJ,GAAA,YAAAA,EAAK,KAAMK,GAASA,EAAK,KAAOF,EAAQ,IAE1DG,EAAiB,CACrB,GAAGH,EACH,KAAMC,GAAA,YAAAA,EAAiB,KACvB,KAAMA,GAAA,YAAAA,EAAiB,IACzB,EAEA,OAAAE,EAAe,OAAS,MACtBA,EAAe,OAAS,MACxBJ,EAAO,KAAKI,CAAc,EACrBJ,CACT,EAAG,EAAiC,EAE7B,MAAA,CACL,GAAGH,EACH,UAAWE,EAAkB,KAC3B,CAACM,EAAGC,IAAMD,EAAE,SAAWC,EAAE,QAAA,CAE7B,CACD,CAAA,CACH,EAEAZ,EACEE,EAAoC,OACjCO,GAAS,CAAC,CAACA,EAAK,UAAU,MAAA,CAE/B,CAAA,QAEKd,EAAO,CACRC,EAAAC,EAAU,iBAAiB,EAAG,OAAO,EAC3C,QAAQ,IAAIF,CAAK,CAAA,QACjB,CACSM,EAAA,CAAA,CAEb,EASaY,EAAuC,CAAC,CACnD,eAAAC,EACA,gBAAAvB,EACA,aAAAwB,CACF,IAIM,SACG,OAAAC,GAAAC,EAAAH,GAAA,YAAAA,EACH,KAAMP,GAAYA,EAAQ,KAAOhB,KAD9B,YAAA0B,EAEH,UAAU,OAAQR,GAASA,EAAK,gBACjC,KAAMA,GAASA,EAAK,OAASM,KAHzB,YAAAC,EAGwC,EACjD"}