{"version":3,"file":"dataUrlWorker-0-pOUrAF.js","sources":["../src/workers/dataUrlWorker.ts"],"sourcesContent":["import { Blob } from \"buffer\";\n\nexport {};\n\ninterface WorkerMessage {\n  canvasData: ImageBitmap;\n  width: number;\n  height: number;\n}\n\nexport interface WorkerResponse {\n  success: boolean;\n  blob?: Blob;\n  error?: string;\n}\n\nself.onmessage = async (event: MessageEvent<WorkerMessage>) => {\n  const { canvasData, width, height } = event.data;\n\n  try {\n    const offscreenCanvas = new OffscreenCanvas(width, height);\n    const ctx = offscreenCanvas.getContext(\"2d\");\n\n    if (!ctx) {\n      throw new Error(\"Failed to get 2D context for OffscreenCanvas.\");\n    }\n\n    ctx.drawImage(canvasData, 0, 0, width, height);\n\n    const blob = await offscreenCanvas.convertToBlob({\n      type: \"image/webp\",\n      quality: 1.0,\n    });\n\n    self.postMessage({ success: true, blob } as WorkerResponse);\n  } catch (error: unknown) {\n    console.error(\"Worker error:\", error);\n\n    const response: WorkerResponse = {\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error\",\n    };\n    self.postMessage(response);\n  }\n};\n"],"names":["event","canvasData","width","height","offscreenCanvas","ctx","blob","error","response"],"mappings":"yBAgBA,KAAK,UAAY,MAAOA,GAAuC,CAC7D,KAAM,CAAE,WAAAC,EAAY,MAAAC,EAAO,OAAAC,GAAWH,EAAM,KAExC,GAAA,CACF,MAAMI,EAAkB,IAAI,gBAAgBF,EAAOC,CAAM,EACnDE,EAAMD,EAAgB,WAAW,IAAI,EAE3C,GAAI,CAACC,EACG,MAAA,IAAI,MAAM,+CAA+C,EAGjEA,EAAI,UAAUJ,EAAY,EAAG,EAAGC,EAAOC,CAAM,EAEvC,MAAAG,EAAO,MAAMF,EAAgB,cAAc,CAC/C,KAAM,aACN,QAAS,CAAA,CACV,EAED,KAAK,YAAY,CAAE,QAAS,GAAM,KAAAE,EAAwB,QACnDC,EAAgB,CACf,QAAA,MAAM,gBAAiBA,CAAK,EAEpC,MAAMC,EAA2B,CAC/B,QAAS,GACT,MAAOD,aAAiB,MAAQA,EAAM,QAAU,eAClD,EACA,KAAK,YAAYC,CAAQ,CAAA,CAE7B"}