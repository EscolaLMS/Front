{"version":3,"file":"index-DBJs5dft.js","sources":["../../src/hooks/questionnaires/index.tsx","../../src/components/Courses/Course/CoursePanelLayout/FinishPage/Rate/index.tsx"],"sourcesContent":["import { useCallback, useContext, useState } from \"react\";\nimport { QuestionType } from \"@/types/questionnaire\";\nimport { toast } from \"@/utils/toast\";\nimport { API } from \"@escolalms/sdk/lib\";\nimport { t } from \"i18next\";\nimport { EscolaLMSContext } from \"@escolalms/sdk/lib/react\";\n\ntype UseQuestionnairesProps = {\n  entityId: number;\n  entityModel: string;\n};\n\nexport const useQuestionnaires = ({\n  entityId,\n  entityModel,\n}: UseQuestionnairesProps) => {\n  const { fetchQuestionnaires, fetchQuestionnaire } =\n    useContext(EscolaLMSContext);\n  const [questionnaires, setQuestionnaires] = useState<API.Questionnaire[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const getQuestionnaire = useCallback(\n    async (questionnaireId: number) => {\n      try {\n        const response = await fetchQuestionnaire(\n          entityModel,\n          entityId,\n          questionnaireId\n        );\n        return response?.success ? response.data.questions : null;\n      } catch (error) {\n        toast(t<string>(\"UnexpectedError\"), \"error\");\n        console.error(error);\n        return null;\n      }\n    },\n    [entityId, entityModel, fetchQuestionnaire]\n  );\n\n  const getQuestionnaires = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetchQuestionnaires(entityModel, entityId);\n\n      if (response?.success) {\n        const questionnairesWithCombinedQuestions = await Promise.all(\n          response.data.map(async (data) => {\n            const questions = await getQuestionnaire(data.id);\n\n            const combinedQuestions = data.questions.reduce(\n              (result, element) => {\n                const matchingElement = questions?.find(\n                  (item) => item.id === element.id\n                );\n\n                const updatedElement = {\n                  ...element,\n                  rate: matchingElement?.rate,\n                  note: matchingElement?.note,\n                };\n                result.push(updatedElement);\n\n                return result;\n              },\n              [] as API.QuestionnaireQuestion[]\n            );\n\n            return {\n              ...data,\n              questions: combinedQuestions.sort(\n                (a, b) => a.position - b.position\n              ),\n            };\n          })\n        );\n\n        setQuestionnaires(\n          questionnairesWithCombinedQuestions.filter(\n            (q) => q.questions.length > 0\n          )\n        );\n      }\n    } catch (error) {\n      setError(\"Failed to fetch questionnaires\");\n      toast(t<string>(\"UnexpectedError\"), \"error\");\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  }, [entityId, entityModel, fetchQuestionnaires, getQuestionnaire]);\n\n  const getReviewQuestion = useCallback(\n    ({\n      questionnaireId,\n      questionType,\n    }: {\n      questionnaireId: number | null;\n      questionType: QuestionType;\n    }) => {\n      return questionnaires\n        ?.find((q) => q.id === questionnaireId)\n        ?.questions.filter((item) => item.public_answers)\n        .find((item) => item.type === questionType)?.id;\n    },\n    [questionnaires]\n  );\n\n  return {\n    questionnaires,\n    loading,\n    error,\n    getQuestionnaires,\n    getReviewQuestion,\n  };\n};\n","import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport RateCourse from \"@/components/Courses/RateCourse\";\nimport { QuestionnaireModelType } from \"@/types/questionnaire\";\nimport { EscolaLMSContext } from \"@escolalms/sdk/lib/react/context\";\nimport { useQuestionnaires } from \"@/hooks/questionnaires\";\nimport { API } from \"@escolalms/sdk/lib\";\nimport { useRoles } from \"@/hooks/useRoles\";\nimport { metaDataKeys } from \"@/utils/meta\";\n\ninterface Props {\n  entityModel: QuestionnaireModelType;\n  entityId: number;\n  showModal?: boolean;\n  onClose?: () => void;\n  onFinish?: () => void;\n  onSuccesGetQuestionnaires?: (isAnyQuestionnaires: boolean) => void;\n}\n\nexport const QuestionnairesModal = ({\n  entityId,\n  entityModel,\n  onSuccesGetQuestionnaires,\n}: Props) => {\n  const {\n    questionnaires: questionnairesList,\n    loading,\n    // error,\n    getQuestionnaires,\n  } = useQuestionnaires({\n    entityId: entityId || 0,\n    entityModel: entityModel,\n  });\n  const { settings } = useContext(EscolaLMSContext);\n  const questionnaireFirstime =\n    settings?.value?.config[metaDataKeys.questionnaireFirstTimeMetaKey];\n\n  interface StateType {\n    show: boolean;\n    step: number;\n    loading: boolean;\n    firstVisit: boolean;\n    firstTimeQuestionnaires: API.Questionnaire[];\n    reShowableQuestionnaires: API.Questionnaire[];\n  }\n\n  const [state, setState] = useState<StateType>({\n    show: false,\n    step: 0,\n    loading: true,\n    firstVisit: true,\n    firstTimeQuestionnaires: [],\n    reShowableQuestionnaires: [],\n  });\n\n  const { isStudent, isTutor } = useRoles();\n\n  const questionnaires = useMemo(() => {\n    return questionnairesList.filter((questionnaire) =>\n      questionnaire.models.some((model) => {\n        if (model.model_type_title === entityModel) {\n          if (model.model_type_title === QuestionnaireModelType.CONSULTATION) {\n            // Additional filters for \"consultation\"\n            return (\n              // @ts-ignore add to sdk\n              (isStudent && model.target_group === \"user\") || // @ts-ignore add to sdk\n              (isTutor && model.target_group === \"author\")\n            );\n          }\n\n          return true;\n        }\n        return false;\n      })\n    );\n  }, [questionnairesList, isStudent, isTutor, entityModel]);\n\n  const categorizedQuestionnaires = useCallback(() => {\n    if (!questionnaires) return;\n\n    const categorized = questionnaires.reduce(\n      (\n        acc: {\n          firstTimeQuestionnaires: API.Questionnaire[];\n          reShowableQuestionnaires: API.Questionnaire[];\n        },\n        questionnaire\n      ) => {\n        const frequency = questionnaire.models.find(\n          (model) =>\n            model.model_type_title === entityModel &&\n            model.model_id === entityId\n          // @ts-ignore add to sdk\n        )?.display_frequency_minutes;\n\n        if (!frequency && frequency !== undefined && frequency !== 0) {\n          acc.firstTimeQuestionnaires.push(questionnaire);\n        }\n\n        if (frequency !== null && frequency !== undefined && frequency !== 0) {\n          acc.reShowableQuestionnaires.push(questionnaire);\n        }\n        return acc;\n      },\n      { firstTimeQuestionnaires: [], reShowableQuestionnaires: [] }\n    );\n\n    setState((prevState) => ({\n      ...prevState,\n      ...categorized,\n    }));\n  }, [questionnaires, entityModel, entityId]);\n\n  const getQuestionnaireFrequency = useCallback(\n    (questionnaire: API.Questionnaire) => {\n      return questionnaire.models.find(\n        (model) =>\n          model.model_type_title === entityModel && model.model_id === entityId\n        // @ts-ignore add to sdk\n      )?.display_frequency_minutes;\n    },\n    [entityModel, entityId]\n  );\n\n  const updateDisplayTime = useCallback(\n    (questionnaire: API.Questionnaire) => {\n      const questionareFrequency = getQuestionnaireFrequency(questionnaire);\n\n      if (questionareFrequency) {\n        localStorage.setItem(\n          `questionnaire_${questionnaire.id}_last_display_time`,\n          Date.now().toString()\n        );\n      }\n    },\n    [getQuestionnaireFrequency]\n  );\n\n  const moveToNextQuestionnaire = useCallback(() => {\n    setState((prevState) => ({\n      ...prevState,\n      step: prevState.step + 1,\n    }));\n    const timer = setTimeout(() => {\n      setState((prevState) => ({\n        ...prevState,\n        show: true,\n      }));\n    }, 500);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    updateDisplayTime(\n      [...state.firstTimeQuestionnaires, ...state.reShowableQuestionnaires][\n        state.step\n      ]\n    );\n\n    setState((prevState) => ({\n      ...prevState,\n      show: false,\n    }));\n\n    if (\n      state.step <\n      [...state.firstTimeQuestionnaires, ...state.reShowableQuestionnaires]\n        .length -\n        1\n    ) {\n      if (state.firstVisit) {\n        moveToNextQuestionnaire();\n      }\n    } else {\n      setState((prevState) => ({\n        ...prevState,\n        show: false,\n        firstVisit: false,\n      }));\n    }\n  }, [state, updateDisplayTime, moveToNextQuestionnaire]);\n\n  const getDisplayFrequencyInMs = useCallback(\n    (questionnaire: API.Questionnaire) => {\n      const frequencyMinutes = getQuestionnaireFrequency(questionnaire);\n      return (frequencyMinutes ?? 0) * 60 * 1000;\n    },\n    [getQuestionnaireFrequency]\n  );\n\n  const shouldDisplayQuestionnaire = useCallback(\n    (questionnaire: API.Questionnaire) => {\n      const lastDisplayTime = localStorage.getItem(\n        `questionnaire_${questionnaire.id}_last_display_time`\n      );\n      if (!lastDisplayTime) return;\n      const displayFrequency = getDisplayFrequencyInMs(questionnaire);\n\n      const timeSinceLastDisplay = Date.now() - Number(lastDisplayTime);\n      return !lastDisplayTime || timeSinceLastDisplay >= displayFrequency;\n    },\n    [getDisplayFrequencyInMs]\n  );\n\n  const displayQuestionnaire = useCallback(\n    (questionnaire: API.Questionnaire) => {\n      setState((prevState) => ({\n        ...prevState,\n        show: true,\n        step: [\n          ...state.firstTimeQuestionnaires,\n          ...state.reShowableQuestionnaires,\n        ].findIndex((q) => q.id === questionnaire.id),\n      }));\n    },\n    [state]\n  );\n\n  const runDisplayInterval = useCallback(() => {\n    return setInterval(() => {\n      state.reShowableQuestionnaires.forEach((questionnaire) => {\n        if (shouldDisplayQuestionnaire(questionnaire)) {\n          displayQuestionnaire(questionnaire);\n        }\n      });\n    }, 1000);\n  }, [shouldDisplayQuestionnaire, displayQuestionnaire, state]);\n\n  useEffect(() => {\n    getQuestionnaires();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [entityId]);\n\n  useEffect(() => {\n    let timer: NodeJS.Timeout;\n    if (questionnaires.length && state.firstVisit) {\n      if (questionnaireFirstime) {\n        timer = setTimeout(() => {\n          setState((prevState) => ({\n            ...prevState,\n            show: true,\n          }));\n        }, questionnaireFirstime * 60 * 1000);\n      } else {\n        setState((prevState) => ({\n          ...prevState,\n          show: true,\n        }));\n      }\n    }\n    if (!!questionnaires.length) {\n      onSuccesGetQuestionnaires && onSuccesGetQuestionnaires(true);\n    }\n    categorizedQuestionnaires();\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [\n    questionnaireFirstime,\n    questionnaires,\n    onSuccesGetQuestionnaires,\n    state.firstVisit,\n    categorizedQuestionnaires,\n  ]);\n\n  useEffect(() => {\n    const intervalId = runDisplayInterval();\n\n    return () => clearInterval(intervalId);\n  }, [state.reShowableQuestionnaires, entityModel, runDisplayInterval]);\n\n  return (\n    <>\n      {state.show &&\n        entityId &&\n        !![...state.firstTimeQuestionnaires, ...state.reShowableQuestionnaires]\n          .length &&\n        !loading && (\n          <RateCourse\n            entityModel={entityModel}\n            entityId={Number(entityId)}\n            visible={state.show}\n            onClose={handleClose}\n            questionnaire={\n              [\n                ...state.firstTimeQuestionnaires,\n                ...state.reShowableQuestionnaires,\n              ][state.step]\n            }\n          />\n        )}\n    </>\n  );\n};\n"],"names":["useQuestionnaires","entityId","entityModel","fetchQuestionnaires","fetchQuestionnaire","useContext","EscolaLMSContext","questionnaires","setQuestionnaires","useState","loading","setLoading","error","setError","getQuestionnaire","useCallback","questionnaireId","response","toast","t","getQuestionnaires","questionnairesWithCombinedQuestions","data","questions","combinedQuestions","result","element","matchingElement","item","updatedElement","a","b","q","getReviewQuestion","questionType","_b","_a","QuestionnairesModal","onSuccesGetQuestionnaires","questionnairesList","settings","questionnaireFirstime","metaDataKeys","state","setState","isStudent","isTutor","useRoles","useMemo","questionnaire","model","QuestionnaireModelType","categorizedQuestionnaires","categorized","acc","frequency","prevState","getQuestionnaireFrequency","updateDisplayTime","moveToNextQuestionnaire","timer","handleClose","getDisplayFrequencyInMs","shouldDisplayQuestionnaire","lastDisplayTime","displayFrequency","timeSinceLastDisplay","displayQuestionnaire","runDisplayInterval","useEffect","intervalId","jsx","RateCourse"],"mappings":"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"}