(function(){"use strict";let f;const w=async(t,c,l=3,u=2e3)=>new Promise((d,a)=>{const i=async s=>{try{const e=await fetch(t,c);if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);d(e)}catch(e){console.error(`Fetch attempt ${s+1} failed:`,e),s<l-1?setTimeout(()=>i(s+1),u):a(`Retries exhausted. Last error: ${e}`)}};i(0)});self.onmessage=async t=>{const{consultationId:c,consultationTermId:l,userEmail:u,userId:d,screenshots:a,term:i}=t.data;if(t.data.apiUrl){f=t.data.apiUrl;return}try{const s=a.map(o=>({filename:`${o.timestamp}.webp`})),e=await w(`${f}/api/consultations/signed-screen-urls`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({consultation_id:c,user_termin_id:l,user_id:d,user_email:u,files:s,executed_at:i})});if(!e.ok)throw new Error(`Failed to sign URLs: ${e.statusText}`);const m=await e.json();for(let o=0;o<m.data.length;o++){const{url:y,filename:r}=m.data[o],p=a.find(n=>`${n.timestamp}.webp`===r);if(!p){console.warn(`Screenshot not found for filename: ${r}`);continue}try{const n=new Blob([p.dataURL]),h=await fetch(y,{method:"PUT",body:n});h.ok?console.log(`File ${r} uploaded successfully.`):console.error(`Failed to upload ${r}: ${h.statusText}`)}catch(n){console.error(`Error uploading ${r}:`,n)}}self.postMessage({success:!0})}catch(s){self.postMessage({success:!1,error:s instanceof Error?s.message:"Unknown error"})}}})();
//# sourceMappingURL=saveImageWorker-BLB7ATek.js.map
