{"version":3,"file":"saveImageWorker-BLB7ATek.js","sources":["../src/workers/saveImageWorker.ts"],"sourcesContent":["export {};\n\nexport interface SaveImagesMessage {\n  consultationId: number;\n  consultationTermId: number;\n  userEmail: string;\n  userId: number;\n  screenshots: { dataURL: Blob; timestamp: number }[];\n  term: string;\n  apiUrl?: string;\n}\n\nlet API_URL: string;\n\nconst retryFetch = async (\n  url: string,\n  options: RequestInit,\n  retries: number = 3,\n  delay: number = 2000\n): Promise<Response> => {\n  return new Promise((resolve, reject) => {\n    const attemptFetch = async (attempt: number) => {\n      try {\n        const response = await fetch(url, options);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        resolve(response);\n      } catch (error) {\n        console.error(`Fetch attempt ${attempt + 1} failed:`, error);\n\n        if (attempt < retries - 1) {\n          setTimeout(() => attemptFetch(attempt + 1), delay);\n        } else {\n          reject(`Retries exhausted. Last error: ${error}`);\n        }\n      }\n    };\n\n    attemptFetch(0);\n  });\n};\n\nself.onmessage = async (event: MessageEvent<SaveImagesMessage>) => {\n  const {\n    consultationId,\n    consultationTermId,\n    userEmail,\n    userId,\n    screenshots,\n    term,\n  } = event.data;\n\n  if (event.data.apiUrl) {\n    API_URL = event.data.apiUrl; // Store the environment variable\n    return; // Exit early if it's just setting the API URL\n  }\n\n  try {\n    const filenames = screenshots.map((screenshot) => ({\n      filename: `${screenshot.timestamp}.webp`,\n    }));\n\n    const signUrls = await retryFetch(\n      `${API_URL}/api/consultations/signed-screen-urls`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          consultation_id: consultationId,\n          user_termin_id: consultationTermId,\n          user_id: userId,\n          user_email: userEmail,\n          files: filenames,\n          executed_at: term,\n        }),\n      }\n    );\n\n    if (!signUrls.ok) {\n      throw new Error(`Failed to sign URLs: ${signUrls.statusText}`);\n    }\n\n    const responseData = await signUrls.json();\n\n    for (let i = 0; i < responseData.data.length; i++) {\n      const { url, filename } = responseData.data[i];\n      const screenshot = screenshots.find(\n        (s) => `${s.timestamp}.webp` === filename\n      );\n\n      if (!screenshot) {\n        console.warn(`Screenshot not found for filename: ${filename}`);\n        continue;\n      }\n\n      try {\n        const blob = new Blob([screenshot.dataURL]);\n        const response = await fetch(url, {\n          method: \"PUT\",\n          body: blob,\n        });\n\n        if (!response.ok) {\n          console.error(`Failed to upload ${filename}: ${response.statusText}`);\n        } else {\n          console.log(`File ${filename} uploaded successfully.`);\n        }\n      } catch (error) {\n        console.error(`Error uploading ${filename}:`, error);\n      }\n    }\n\n    self.postMessage({ success: true });\n  } catch (error) {\n    self.postMessage({\n      success: false,\n      error: error instanceof Error ? error.message : \"Unknown error\",\n    });\n  }\n};\n"],"names":["API_URL","retryFetch","url","options","retries","delay","resolve","reject","attemptFetch","attempt","response","error","event","consultationId","consultationTermId","userEmail","userId","screenshots","term","filenames","screenshot","signUrls","responseData","i","filename","s","blob"],"mappings":"yBAYA,IAAIA,EAEJ,MAAMC,EAAa,MACjBC,EACAC,EACAC,EAAkB,EAClBC,EAAgB,MAET,IAAI,QAAQ,CAACC,EAASC,IAAW,CAChC,MAAAC,EAAe,MAAOC,GAAoB,CAC1C,GAAA,CACF,MAAMC,EAAW,MAAM,MAAMR,EAAKC,CAAO,EACrC,GAAA,CAACO,EAAS,GACZ,MAAM,IAAI,MAAM,uBAAuBA,EAAS,MAAM,EAAE,EAE1DJ,EAAQI,CAAQ,QACTC,EAAO,CACd,QAAQ,MAAM,iBAAiBF,EAAU,CAAC,WAAYE,CAAK,EAEvDF,EAAUL,EAAU,EACtB,WAAW,IAAMI,EAAaC,EAAU,CAAC,EAAGJ,CAAK,EAE1CE,EAAA,kCAAkCI,CAAK,EAAE,CAClD,CAEJ,EAEAH,EAAa,CAAC,CAAA,CACf,EAGH,KAAK,UAAY,MAAOI,GAA2C,CAC3D,KAAA,CACJ,eAAAC,EACA,mBAAAC,EACA,UAAAC,EACA,OAAAC,EACA,YAAAC,EACA,KAAAC,GACEN,EAAM,KAEN,GAAAA,EAAM,KAAK,OAAQ,CACrBZ,EAAUY,EAAM,KAAK,OACrB,MAAA,CAGE,GAAA,CACF,MAAMO,EAAYF,EAAY,IAAKG,IAAgB,CACjD,SAAU,GAAGA,EAAW,SAAS,OAAA,EACjC,EAEIC,EAAW,MAAMpB,EACrB,GAAGD,CAAO,wCACV,CACE,OAAQ,OACR,QAAS,CACP,eAAgB,kBAClB,EACA,KAAM,KAAK,UAAU,CACnB,gBAAiBa,EACjB,eAAgBC,EAChB,QAASE,EACT,WAAYD,EACZ,MAAOI,EACP,YAAaD,CACd,CAAA,CAAA,CAEL,EAEI,GAAA,CAACG,EAAS,GACZ,MAAM,IAAI,MAAM,wBAAwBA,EAAS,UAAU,EAAE,EAGzD,MAAAC,EAAe,MAAMD,EAAS,KAAK,EAEzC,QAASE,EAAI,EAAGA,EAAID,EAAa,KAAK,OAAQC,IAAK,CACjD,KAAM,CAAE,IAAArB,EAAK,SAAAsB,CAAA,EAAaF,EAAa,KAAKC,CAAC,EACvCH,EAAaH,EAAY,KAC5BQ,GAAM,GAAGA,EAAE,SAAS,UAAYD,CACnC,EAEA,GAAI,CAACJ,EAAY,CACP,QAAA,KAAK,sCAAsCI,CAAQ,EAAE,EAC7D,QAAA,CAGE,GAAA,CACF,MAAME,EAAO,IAAI,KAAK,CAACN,EAAW,OAAO,CAAC,EACpCV,EAAW,MAAM,MAAMR,EAAK,CAChC,OAAQ,MACR,KAAMwB,CAAA,CACP,EAEIhB,EAAS,GAGJ,QAAA,IAAI,QAAQc,CAAQ,yBAAyB,EAFrD,QAAQ,MAAM,oBAAoBA,CAAQ,KAAKd,EAAS,UAAU,EAAE,QAI/DC,EAAO,CACd,QAAQ,MAAM,mBAAmBa,CAAQ,IAAKb,CAAK,CAAA,CACrD,CAGF,KAAK,YAAY,CAAE,QAAS,EAAA,CAAM,QAC3BA,EAAO,CACd,KAAK,YAAY,CACf,QAAS,GACT,MAAOA,aAAiB,MAAQA,EAAM,QAAU,eAAA,CACjD,CAAA,CAEL"}