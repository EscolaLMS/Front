(function(){"use strict";let f;const h=async(s,e,o=3,n=2e3)=>new Promise((a,u)=>{const d=async r=>{try{const t=await fetch(s,e);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);a(t)}catch(t){console.error(`Fetch attempt ${r+1} failed:`,t),r<o-1?setTimeout(()=>d(r+1),n):u(`Retries exhausted. Last error: ${t}`)}};d(0)});function m(s){const e=new Date(s.timestamp),o=a=>a.toString().padStart(2,"0"),n=`${e.getFullYear()}${o(e.getMonth()+1)}${o(e.getDate())}_${o(e.getHours())}_${o(e.getMinutes())}_${o(e.getSeconds())}`;return`${s.userID}_${s.consultationId}_${n}.webp`}self.onmessage=async s=>{const{consultationId:e,consultationTermId:o,userEmail:n,userId:a,screenshots:u,term:d}=s.data;if(s.data.apiUrl){f=s.data.apiUrl;return}try{const r=u.map(i=>({filename:m(i)})),t=await h(`${f}/api/consultations/signed-screen-urls`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({consultation_id:e,user_termin_id:o,user_id:a,user_email:n,files:r,executed_at:d})});if(!t.ok)throw new Error(`Failed to sign URLs: ${t.statusText}`);const p=await t.json();for(let i=0;i<p.data.length;i++){const{url:w,filename:c}=p.data[i],g=u.find(l=>m(l)===c);if(!g){console.warn(`Screenshot not found for filename: ${c}`);continue}try{const l=new Blob([g.dataURL]),$=await fetch(w,{method:"PUT",body:l});$.ok?console.log(`File ${c} uploaded successfully.`):console.error(`Failed to upload ${c}: ${$.statusText}`)}catch(l){console.error(`Error uploading ${c}:`,l)}}self.postMessage({success:!0})}catch(r){self.postMessage({success:!1,error:r instanceof Error?r.message:"Unknown error"})}}})();
//# sourceMappingURL=saveImageWorker-D-miS2i4.js.map
